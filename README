----------------------------------------------------------------------------
openMSX - the MSX emulator that aims for perfection
----------------------------------------------------------------------------

openMSX comes with a set of HTML manuals that tell what you need to know
to install, configure and run openMSX. You can find these manuals in the
directory 'manual' inside the directory 'doc'. You can read them using
a web browser.

You can read what has changed in this and the previous releases in the
release notes. You can find the release notes of this release in the file
'release-notes.txt' in the directory 'doc'. Highlights of previous releases
can be found in 'release-history.txt'.

All source code and other works that are part of, or distributed with
openMSX are copyrighted by their respective authors. The file 'authors.txt'
contains a list of people who made works for openMSX or contributed works
to openMSX.

Some source files contain a license notice; all other source files are
licensed under the GNU Public License (GPL), of which you can find a copy
in the file 'GPL.txt'. If you got a binary release of openMSX and are
interested in the sources, please visit our home page:
    https://openmsx.org/

Happy MSX-ing!
                        the openMSX developers

----------------------------------------------------------------------------

* This Fork is for MSXPi Extension for openMSX
----------------------------------------------------------------------------

The MSXPi extension allows you to connect a virtual MSXPi to your MSX 
running in the openMSX, and use the same commands found in the physical
MSXPi running in real hardware.

It works by implementing a MSXPi Device that listen to the I/O ports allocated
for MSXPi and fowarding the data to a local TCP socket, which is implemented
by a Python program (the msxpi-server). The MSXPi device also works for data
send by the Python program, that is, reading the responses and forwarding to
the MSX computer, just like the real thing.

There are some difference in the Python code that runs along with openMSX and
the Python server that runs in the Raspberry Pi - specifically, the low-level
byte transfer which uses GPIO in the Raspberry Pi, and Socket communication
in the openMSX solution, but other than that, the remaining code should be
the same and work on both platforms.

This is a work in progress - all the features mentioned are planned and not
yet available.


* Quick Start - MSXPi Extension

The MSXPisimpleDevice is composed these new files:

openmsx/src/MSXPi/MSXPiDeviceSimple.cc
openmsx/src/MSXPi/MSXPiDeviceSimple.hh
openmsx/share/extensions/MSXPiDeviceSimple.xml

and two changes to openMSX/src/DeviceFactory.cc:
```
include <MSXPiDeviceSimple.hh>
} else if (type == "MSXPi") {
	result = std::make_unique<MSXPiDeviceSimple>(conf);
}
```
	
To compile and test the MSXPi extension, follow these steps after cloning this
repository.
All commands below assume you are in the openMSX root folder: openMSX/

> Compile the code and install (in my example, I install under /opt/openMSX in
 a Linux platform):
 make -j$(nproc); sudo make install
 
> run the Python server on the local host - use a second CLI window for this:
 python3 MSXPi/msxpi-server.python3
 
> Start openMSX (Assuming you created a folder with MSX-DOS 1.3 to boot from):
 /opt/openMSX/bin/openmsx -machine Panasonic_FS-A1WSX -ext MSXPi 
 -diska MSXPi/msxdisk

> In openMSX, switch to BASIC and load the test3.bas program. The test3 program 
 sends a numeric byte to the server. The server increment the number by 1 and
 send back to MSX. The purpose is to show the basic communication mechanism,
 yet without a protocol:
 load "test3.bas"
 run
 
To-Do:
- Protocol - MSXPi extension needs a protocol that will read single-bytes and
 translate into commands that the server can execute. Effort should concentrate
 for now in the design, development and testing of a robust protocol.
 It can be prototyped in BASIC until final design is agreed, when it will then
 be coded in Assembly and integrated to the MSXPi BIOS (for MSX-DOS commands
 and BASIC BIOS extension).
 
